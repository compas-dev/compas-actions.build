name: "compas-actions.build"
description: "Build and test COMPAS or its plugins."

inputs:
  invoke_lint:
    description: "Whether to test lint errors."
    required: true
    default: "false"
  check_import:
    description: "Whether to test with python -m compas."
    required: true
    default: "false"
  invoke_test:
    description: "Whether to run invoke test."
    required: false
    default: "true"
  use_conda:
    description: "Whether to build with conda."
    required: false
    default: "false"
  python:
    description: "which python version to build with."
    required: true
    default: "3.10"
  build_ghpython_components:
    description: "Whether to build Grasshopper components."
    required: false
    default: "false"
  gh_source:
    description: "The source path to build Grasshopper components"
    required: false
    default: "src/compas_ghpython/components"
  gh_target:
    description: "The target path to build Grasshopper components"
    required: false
    default: "src/compas_ghpython/components/ghuser"
  gh_prefix:
    description: "optional prefix added to the name of each generated Grasshopper component"
    required: false
  gh_interpreter:
    description: "interpreter used to build Grasshopper components, either 'ironpython' or 'cpython'. Defaults to 'ironpython'"
    required: false
    default: "ironpython"
  submodules:
    description: "Whether to checkout submodules, value can be 'true', 'recursive', or 'false'"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        submodules: ${{ inputs.submodules }}

    # Build as PYPI package.
    - if: inputs.use_conda == 'false'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python }}

    - if: inputs.use_conda == 'false'
      shell: bash
      run: |
        echo "This is a PYPI package."

        python -m pip install --upgrade pip
        pip install -e ".[dev]" 

        if [[ ${{ inputs.invoke_lint }} = "true" ]]; then
          invoke lint
        fi;

        if [[ ${{ inputs.check_import }} = "true" ]]; then
          python -m compas
        fi;

        if [[ ${{ inputs.invoke_test }} = "true" ]]; then
          invoke test
        fi;

    - uses: NuGet/setup-nuget@v1.0.5
      if: inputs.build_ghpython_components == 'true'

    - shell: bash
      if: inputs.build_ghpython_components == 'true'
      run: |
        choco install ironpython --version=2.7.8.1

    - name: ðŸ¦— Build grasshopper components
      uses: compas-dev/compas-actions.ghpython_components@v5
      if: inputs.build_ghpython_components == 'true'
      with:
        source: ${{ inputs.gh_source }}
        target: ${{ inputs.gh_target }}
        prefix: ${{ inputs.gh_prefix }}
        interpreter: ${{ inputs.gh_interpreter }}

    # Build as conda package.
    - if: inputs.use_conda == 'true'
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: latest
        channels: conda-forge
        activate-environment: compas
        python-version: ${{ inputs.python }}

    - if: inputs.use_conda == 'true'
      shell: bash -l {0}
      run: |
        echo "This is a conda package."

        if [[ ${{ runner.os }} == "Windows" && -f env_win.yml ]]; then
          echo using env_win.yml
          conda env update -f env_win.yml -n compas
        elif [[ ${{ runner.os }} == "macOS" && -f env_osx.yml ]]; then
          echo using env_osx.yml
          conda env update -f env_osx.yml -n compas
        elif [[ ${{ runner.os }} == "Linux" && -f env_linux.yml ]]; then
          echo using env_linux.yml
          conda env update -f env_linux.yml -n compas
        elif [[ -f environment.yml ]]; then
          echo using environment.yml
          conda env update -f environment.yml -n compas
        else
          echo ERROR: Failed find environment yml file.
          exit 1
        fi

        if [[ ${{ inputs.invoke_lint }} = "true" ]]; then
          invoke lint
        fi;

        if [[ ${{ inputs.check_import }} = "true" ]]; then
          python -m compas
        fi;

        if [[ ${{ inputs.invoke_test }} = "true" ]]; then
          invoke test
        fi;
